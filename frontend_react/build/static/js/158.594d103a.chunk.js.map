{"version":3,"file":"static/js/158.594d103a.chunk.js","mappings":"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","sources":["../node_modules/@sanity/client/src/csm/studioPath.ts","../node_modules/@sanity/client/src/csm/jsonPath.ts","../node_modules/@sanity/client/src/csm/resolveMapping.ts","../node_modules/@sanity/client/src/csm/isRecord.ts","../node_modules/@sanity/client/src/csm/walkMap.ts","../node_modules/@sanity/client/src/csm/isArray.ts","../node_modules/@sanity/client/src/stega/encodeIntoResult.ts","../node_modules/@sanity/client/src/csm/getPublishedId.ts","../node_modules/@sanity/client/src/csm/createEditUrl.ts","../node_modules/@sanity/client/src/stega/filterDefault.ts","../node_modules/@sanity/client/src/stega/stegaEncodeSourceMap.ts","../node_modules/@sanity/client/src/csm/resolveEditInfo.ts"],"sourcesContent":["/** @alpha */\nexport type KeyedSegment = {_key: string}\n\n/** @alpha */\nexport type IndexTuple = [number | '', number | '']\n\n/** @alpha */\nexport type PathSegment = string | number | KeyedSegment | IndexTuple\n\n/** @alpha */\nexport type Path = PathSegment[]\n\nconst rePropName =\n  /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n/** @internal */\nexport const reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/\nconst reIndexTuple = /^\\d*:\\d*$/\n\n/** @internal */\nexport function isIndexSegment(segment: PathSegment): segment is number {\n  return typeof segment === 'number' || (typeof segment === 'string' && /^\\[\\d+\\]$/.test(segment))\n}\n\n/** @internal */\nexport function isKeySegment(segment: PathSegment): segment is KeyedSegment {\n  if (typeof segment === 'string') {\n    return reKeySegment.test(segment.trim())\n  }\n\n  return typeof segment === 'object' && '_key' in segment\n}\n\n/** @internal */\nexport function isIndexTuple(segment: PathSegment): segment is IndexTuple {\n  if (typeof segment === 'string' && reIndexTuple.test(segment)) {\n    return true\n  }\n\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false\n  }\n\n  const [from, to] = segment\n  return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '')\n}\n\n/** @internal */\nexport function get<Result = unknown, Fallback = unknown>(\n  obj: unknown,\n  path: Path | string,\n  defaultVal?: Fallback,\n): Result | typeof defaultVal {\n  const select = typeof path === 'string' ? fromString(path) : path\n  if (!Array.isArray(select)) {\n    throw new Error('Path must be an array or a string')\n  }\n\n  let acc: unknown | undefined = obj\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i]\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc[segment]\n    }\n\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc.find((item) => item._key === segment._key)\n    }\n\n    if (typeof segment === 'string') {\n      acc =\n        typeof acc === 'object' && acc !== null\n          ? ((acc as Record<string, unknown>)[segment] as Result)\n          : undefined\n    }\n\n    if (typeof acc === 'undefined') {\n      return defaultVal\n    }\n  }\n\n  return acc as Result\n}\n\n/** @alpha */\nexport function toString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (Array.isArray(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\n/** @alpha */\nexport function fromString(path: string): Path {\n  if (typeof path !== 'string') {\n    throw new Error('Path is not a string')\n  }\n\n  const segments = path.match(rePropName)\n  if (!segments) {\n    throw new Error('Invalid path string')\n  }\n\n  return segments.map(parsePathSegment)\n}\n\nfunction parsePathSegment(segment: string): PathSegment {\n  if (isIndexSegment(segment)) {\n    return parseIndexSegment(segment)\n  }\n\n  if (isKeySegment(segment)) {\n    return parseKeySegment(segment)\n  }\n\n  if (isIndexTuple(segment)) {\n    return parseIndexTupleSegment(segment)\n  }\n\n  return segment\n}\n\nfunction parseIndexSegment(segment: string): PathSegment {\n  return Number(segment.replace(/[^\\d]/g, ''))\n}\n\nfunction parseKeySegment(segment: string): KeyedSegment {\n  const segments = segment.match(reKeySegment)\n  return {_key: segments![1]}\n}\n\nfunction parseIndexTupleSegment(segment: string): IndexTuple {\n  const [from, to] = segment.split(':').map((seg) => (seg === '' ? seg : Number(seg)))\n  return [from, to]\n}\n","import * as studioPath from './studioPath'\nimport type {\n  ContentSourceMapParsedPath,\n  ContentSourceMapParsedPathKeyedSegment,\n  ContentSourceMapPaths,\n  Path,\n} from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/**\n * @internal\n */\nexport function jsonPath(path: ContentSourceMapParsedPath): ContentSourceMapPaths[number] {\n  return `$${path\n    .map((segment) => {\n      if (typeof segment === 'string') {\n        const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      if (typeof segment === 'number') {\n        return `[${segment}]`\n      }\n\n      if (segment._key !== '') {\n        const escapedKey = segment._key.replace(/['\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `[?(@._key=='${escapedKey}')]`\n      }\n\n      return `[${segment._index}]`\n    })\n    .join('')}`\n}\n\n/**\n * @internal\n */\nexport function parseJsonPath(path: ContentSourceMapPaths[number]): ContentSourceMapParsedPath {\n  const parsed: ContentSourceMapParsedPath = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n\n    if (match[3] !== undefined) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push({\n        _key,\n        _index: -1,\n      })\n      continue\n    }\n  }\n\n  return parsed\n}\n\n/**\n * @internal\n */\nexport function jsonPathToStudioPath(path: ContentSourceMapParsedPath): Path {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._key !== '') {\n      return {_key: segment._key}\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\n/**\n * @internal\n */\nexport function studioPathToJsonPath(path: Path | string): ContentSourceMapParsedPath {\n  const parsedPath = typeof path === 'string' ? studioPath.fromString(path) : path\n\n  return parsedPath.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (Array.isArray(segment)) {\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`)\n    }\n\n    if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n      return segment\n    }\n\n    if (segment._key) {\n      return {_key: segment._key, _index: -1}\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\nfunction isContentSourceMapParsedPathKeyedSegment(\n  segment: studioPath.PathSegment | ContentSourceMapParsedPath[number],\n): segment is ContentSourceMapParsedPathKeyedSegment {\n  return typeof segment === 'object' && '_key' in segment && '_index' in segment\n}\n\n/**\n * @internal\n */\nexport function jsonPathToMappingPath(path: ContentSourceMapParsedPath): (string | number)[] {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n","import {jsonPath, jsonPathToMappingPath} from './jsonPath'\nimport type {ContentSourceMap, ContentSourceMapMapping, ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolveMapping(\n  resultPath: ContentSourceMapParsedPath,\n  csm?: ContentSourceMap,\n):\n  | {\n      mapping: ContentSourceMapMapping\n      matchedPath: string\n      pathSuffix: string\n    }\n  | undefined {\n  if (!csm?.mappings) {\n    return undefined\n  }\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath))\n\n  if (csm.mappings[resultMappingPath] !== undefined) {\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: '',\n    }\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultMappingPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultMappingPath.substring(matchedPath.length)\n  return {mapping, matchedPath, pathSuffix}\n}\n","/** @internal */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n","import {isArray} from './isArray'\nimport {isRecord} from './isRecord'\nimport type {ContentSourceMapParsedPath, WalkMapFn} from './types'\n\n/**\n * generic way to walk a nested object or array and apply a mapping function to each value\n * @internal\n */\nexport function walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: ContentSourceMapParsedPath = [],\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v['_key']\n        if (typeof _key === 'string') {\n          return walkMap(v, mappingFn, path.concat({_key, _index: idx}))\n        }\n      }\n\n      return walkMap(v, mappingFn, path.concat(idx))\n    })\n  }\n\n  if (isRecord(value)) {\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))]),\n    )\n  }\n\n  return mappingFn(value, path)\n}\n","/** @internal */\nexport function isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n","import {parseJsonPath} from '../csm/jsonPath'\nimport {resolveMapping} from '../csm/resolveMapping'\nimport type {ContentSourceMap} from '../csm/types'\nimport {walkMap} from '../csm/walkMap'\nimport type {Encoder} from './types'\n\n/**\n * @internal\n */\nexport function encodeIntoResult<Result>(\n  result: Result,\n  csm: ContentSourceMap,\n  encoder: Encoder,\n): Result {\n  return walkMap(result, (value, path) => {\n    // Only map strings, we could extend this in the future to support other types like integers...\n    if (typeof value !== 'string') {\n      return value\n    }\n\n    const resolveMappingResult = resolveMapping(path, csm)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, matchedPath} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = csm.documents[mapping.source.document!]\n    const sourcePath = csm.paths[mapping.source.path]\n\n    const matchPathSegments = parseJsonPath(matchedPath)\n    const sourcePathSegments = parseJsonPath(sourcePath)\n    const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length))\n\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value,\n    })\n  }) as Result\n}\n","export const DRAFTS_PREFIX = 'drafts.'\n\n/** @internal */\nexport function getPublishedId(id: string): string {\n  if (id.startsWith(DRAFTS_PREFIX)) {\n    return id.slice(DRAFTS_PREFIX.length)\n  }\n\n  return id\n}\n","import {getPublishedId} from './getPublishedId'\nimport {jsonPathToStudioPath} from './jsonPath'\nimport * as studioPath from './studioPath'\nimport type {CreateEditUrlOptions, EditIntentUrl, StudioBaseUrl} from './types'\n\n/** @internal */\nexport function createEditUrl(options: CreateEditUrlOptions): `${StudioBaseUrl}${EditIntentUrl}` {\n  const {\n    baseUrl,\n    workspace: _workspace = 'default',\n    tool: _tool = 'default',\n    id: _id,\n    type,\n    path,\n  } = options\n\n  if (!baseUrl) {\n    throw new Error('baseUrl is required')\n  }\n  if (!path) {\n    throw new Error('path is required')\n  }\n  if (!_id) {\n    throw new Error('id is required')\n  }\n  if (baseUrl !== '/' && baseUrl.endsWith('/')) {\n    throw new Error('baseUrl must not end with a slash')\n  }\n\n  const workspace = _workspace === 'default' ? undefined : _workspace\n  const tool = _tool === 'default' ? undefined : _tool\n  // eslint-disable-next-line no-warning-comments\n  // @TODO allow passing draft prefixed IDs, to better open the right perspective mode\n  const id = getPublishedId(_id)\n  const stringifiedPath = Array.isArray(path)\n    ? studioPath.toString(jsonPathToStudioPath(path))\n    : path\n\n  // eslint-disable-next-line no-warning-comments\n  // @TODO Using searchParams as a temporary workaround until `@sanity/overlays` can decode state from the path reliably\n  const searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath,\n  })\n  if (workspace) {\n    searchParams.set('workspace', workspace)\n  }\n  if (tool) {\n    searchParams.set('tool', tool)\n  }\n\n  const segments = [baseUrl === '/' ? '' : baseUrl]\n  if (workspace) {\n    segments.push(workspace)\n  }\n  const routerParams = [\n    'mode=presentation',\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`,\n  ]\n  if (tool) {\n    routerParams.push(`tool=${tool}`)\n  }\n  segments.push('intent', 'edit', `${routerParams.join(';')}?${searchParams}`)\n  return segments.join('/') as unknown as `${StudioBaseUrl}${EditIntentUrl}`\n}\n","import type {FilterDefault} from './types'\n\nexport const filterDefault: FilterDefault = ({sourcePath, value}) => {\n  // Skips encoding on URL or Date strings, similar to the `skip: 'auto'` parameter in vercelStegaCombine()\n  if (isValidDate(value) || isValidURL(value)) {\n    return false\n  }\n\n  const endPath = sourcePath.at(-1)\n  // Never encode slugs\n  if (sourcePath.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && endPath.startsWith('_')) {\n    return false\n  }\n\n  /**\n   * Best effort infer Portable Text paths that should not be encoded.\n   * Nothing is for certain, and the below implementation may cause paths that aren't Portable Text and otherwise be safe to encode to be skipped.\n   * However, that's ok as userland can always opt-in with the `encodeSourceMapAtPath` option and mark known safe paths as such, which will override this heuristic.\n   */\n  // If the path ends in marks[number] it's likely a PortableTextSpan: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#LL154C16-L154C16\n  if (typeof endPath === 'number' && sourcePath.at(-2) === 'marks') {\n    return false\n  }\n  // Or if it's [number].markDefs[number].href it's likely a PortableTextLink: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L163\n  if (\n    endPath === 'href' &&\n    typeof sourcePath.at(-2) === 'number' &&\n    sourcePath.at(-3) === 'markDefs'\n  ) {\n    return false\n  }\n  // Otherwise we have to deal with special properties of PortableTextBlock, and we can't confidently know if it's actually a `_type: 'block'` array item or not.\n  // All we know is that if it is indeed a block, and we encode the strings on these keys it'll for sure break the PortableText rendering and thus we skip encoding.\n  // https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L48-L58\n  if (endPath === 'style' || endPath === 'listItem') {\n    return false\n  }\n\n  // Don't encode into anything that is suggested it'll render for SEO in meta tags\n  if (\n    sourcePath.some(\n      (path) => path === 'meta' || path === 'metadata' || path === 'openGraph' || path === 'seo',\n    )\n  ) {\n    return false\n  }\n\n  // Finally, we ignore a bunch of paths that are typically used for page building\n  if (typeof endPath === 'string' && denylist.has(endPath)) {\n    return false\n  }\n\n  return true\n}\n\nconst denylist = new Set([\n  'color',\n  'colour',\n  'currency',\n  'email',\n  'format',\n  'gid',\n  'hex',\n  'href',\n  'hsl',\n  'hsla',\n  'icon',\n  'id',\n  'index',\n  'key',\n  'language',\n  'layout',\n  'link',\n  'linkAction',\n  'locale',\n  'lqip',\n  'page',\n  'path',\n  'ref',\n  'rgb',\n  'rgba',\n  'route',\n  'secret',\n  'slug',\n  'status',\n  'tag',\n  'template',\n  'theme',\n  'type',\n  'unit',\n  'url',\n  'username',\n  'variant',\n  'website',\n])\n\nfunction isValidDate(dateString: string) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false\n}\n\nfunction isValidURL(url: string) {\n  try {\n    new URL(url, url.startsWith('/') ? 'https://acme.com' : undefined)\n  } catch {\n    return false\n  }\n  return true\n}\n","import {vercelStegaCombine} from '@vercel/stega'\n\nimport {createEditUrl} from '../csm/createEditUrl'\nimport {jsonPathToStudioPath} from '../csm/jsonPath'\nimport {resolveStudioBaseRoute} from '../csm/resolveEditInfo'\nimport {reKeySegment, toString as studioPathToString} from '../csm/studioPath'\nimport {encodeIntoResult} from './encodeIntoResult'\nimport {filterDefault} from './filterDefault'\nimport {ContentSourceMap, ContentSourceMapParsedPath, InitializedStegaConfig} from './types'\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * Uses `@vercel/stega` to embed edit info JSON into strings in your query result.\n * The JSON payloads are added using invisible characters so they don't show up visually.\n * The edit info is generated from the Content Source Map (CSM) that is returned from Sanity for the query.\n * @public\n */\nexport function stegaEncodeSourceMap<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  config: InitializedStegaConfig,\n): Result {\n  const {filter, logger, enabled} = config\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\"\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  if (!resultSourceMap) {\n    logger?.error?.('[@sanity/client]: Missing Content Source Map from response body', {\n      result,\n      resultSourceMap,\n      config,\n    })\n    return result\n  }\n\n  if (!config.studioUrl) {\n    const msg = 'config.studioUrl must be defined'\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  const report: Record<'encoded' | 'skipped', {path: string; length: number; value: string}[]> = {\n    encoded: [],\n    skipped: [],\n  }\n\n  const resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({sourcePath, sourceDocument, resultPath, value}) => {\n      // Allow userland to control when to opt-out of encoding\n      if (\n        (typeof filter === 'function'\n          ? filter({sourcePath, resultPath, filterDefault, sourceDocument, value})\n          : filterDefault({sourcePath, resultPath, filterDefault, sourceDocument, value})) === false\n      ) {\n        if (logger) {\n          report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${\n              value.length > TRUNCATE_LENGTH ? '...' : ''\n            }`,\n            length: value.length,\n          })\n        }\n        return value\n      }\n\n      if (logger) {\n        report.encoded.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? '...' : ''}`,\n          length: value.length,\n        })\n      }\n\n      const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n        typeof config.studioUrl === 'function'\n          ? config.studioUrl(sourceDocument)\n          : config.studioUrl!,\n      )\n      if (!baseUrl) return value\n      const {_id: id, _type: type} = sourceDocument\n\n      return vercelStegaCombine(\n        value,\n        {\n          origin: 'sanity.io',\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n          }),\n        },\n        // We use custom logic to determine if we should skip encoding\n        false,\n      )\n    },\n  )\n\n  if (logger) {\n    const isSkipping = report.skipped.length\n    const isEncoding = report.encoded.length\n    if (isSkipping || isEncoding) {\n      ;(logger?.groupCollapsed || logger.log)?.('[@sanity/client]: Encoding source map into result')\n      logger.log?.(\n        `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`,\n      )\n    }\n    if (report.encoded.length > 0) {\n      logger?.log?.(`[@sanity/client]: Table of encoded paths`)\n      ;(logger?.table || logger.log)?.(report.encoded)\n    }\n    if (report.skipped.length > 0) {\n      const skipped = new Set<string>()\n      for (const {path} of report.skipped) {\n        skipped.add(path.replace(reKeySegment, '0').replace(/\\[\\d+\\]/g, '[]'))\n      }\n      logger?.log?.(`[@sanity/client]: List of skipped paths`, [...skipped.values()])\n    }\n\n    if (isSkipping || isEncoding) {\n      logger?.groupEnd?.()\n    }\n  }\n\n  return resultWithStega\n}\n\nfunction prettyPathForLogging(path: ContentSourceMapParsedPath): string {\n  return studioPathToString(jsonPathToStudioPath(path))\n}\n","import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport type {\n  CreateEditUrlOptions,\n  ResolveEditInfoOptions,\n  StudioBaseRoute,\n  StudioBaseUrl,\n  StudioUrl,\n} from './types'\n\n/** @internal */\nexport function resolveEditInfo(options: ResolveEditInfoOptions): CreateEditUrlOptions | undefined {\n  const {resultSourceMap: csm, resultPath} = options\n  const {mapping, pathSuffix} = resolveMapping(resultPath, csm) || {}\n\n  if (!mapping) {\n    // console.warn('no mapping for path', { path: resultPath, sourceMap: csm })\n    return undefined\n  }\n\n  if (mapping.source.type === 'literal') {\n    return undefined\n  }\n\n  if (mapping.source.type === 'unknown') {\n    return undefined\n  }\n\n  const sourceDoc = csm.documents[mapping.source.document]\n  const sourcePath = csm.paths[mapping.source.path]\n\n  if (sourceDoc && sourcePath) {\n    const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n      typeof options.studioUrl === 'function' ? options.studioUrl(sourceDoc) : options.studioUrl,\n    )\n    if (!baseUrl) return undefined\n    const {_id, _type} = sourceDoc\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n    } satisfies CreateEditUrlOptions\n  }\n\n  return undefined\n}\n\n/** @internal */\nexport function resolveStudioBaseRoute(studioUrl: StudioUrl): StudioBaseRoute {\n  let baseUrl: StudioBaseUrl = typeof studioUrl === 'string' ? studioUrl : studioUrl.baseUrl\n  if (baseUrl !== '/') {\n    baseUrl = baseUrl.replace(/\\/$/, '')\n  }\n  if (typeof studioUrl === 'string') {\n    return {baseUrl}\n  }\n  return {...studioUrl, baseUrl}\n}\n"],"names":["reKeySegment","toString","path","Array","isArray","Error","reduce","target","segment","i","segmentType","concat","separator","test","trim","isKeySegment","_key","from","to","JSON","stringify","ESCAPE","UNESCAPE","parseJsonPath","parsed","parseRe","match","exec","replace","m","push","_index","parseInt","key","jsonPathToStudioPath","map","resolveMapping","resultPath","csm","mappings","resultMappingPath","escapedKey","join","jsonPath","mapping","matchedPath","pathSuffix","Object","entries","filter","_ref","startsWith","sort","_ref2","_ref3","key1","key2","length","substring","isRecord","value","walkMap","mappingFn","arguments","undefined","v","idx","fromEntries","_ref4","k","encodeIntoResult","result","encoder","resolveMappingResult","type","source","sourceDocument","documents","document","sourcePath","paths","matchPathSegments","fullSourceSegments","slice","DRAFTS_PREFIX","createEditUrl","options","baseUrl","workspace","_workspace","tool","_tool","id","_id","endsWith","getPublishedId","stringifiedPath","searchParams","URLSearchParams","set","segments","routerParams","encodeURIComponent","filterDefault","_ref5","dateString","Boolean","Date","parse","url","URL","isValidURL","endPath","at","some","denylist","has","Set","TRUNCATE_LENGTH","stegaEncodeSourceMap","resultSourceMap","config","_a","_b","_c","_d","_e","_f","_g","_h","_i","logger","enabled","msg","error","call","TypeError","studioUrl","report","encoded","skipped","resultWithStega","_ref6","prettyPathForLogging","resolveStudioBaseRoute","_type","b","origin","href","isSkipping","isEncoding","groupCollapsed","log","table","add","values","groupEnd"],"sourceRoot":""}